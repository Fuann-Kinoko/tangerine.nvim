*tangerine.txt*                           Sweet fennel integeration for neovim

==============================================================================
Table of Contents                                *tangerine-table-of-contents*

1. About                                                     |tangerine-about|
  - Features                                              |tangerine-features|
  - Comparison to other plugins        |tangerine-comparison-to-other-plugins|
2. Installation                                       |tangerine-installation|
3. Setup                                                     |tangerine-setup|
4. Commands                                               |tangerine-commands|
  - Compiling                                            |tangerine-compiling|
  - Evaluation                                          |tangerine-evaluation|
  - Peaking                                                |tangerine-peaking|
  - Window                                                  |tangerine-window|
5. FAQ                                                         |tangerine-faq|
6. Api                                                         |tangerine-api|
  - Compiler Api                                      |tangerine-compiler-api|
  - Cleaning Api                                      |tangerine-cleaning-api|
  - Evaluation Api                                  |tangerine-evaluation-api|
  - Utils Api                                            |tangerine-utils-api|
  - Windows Api                                        |tangerine-windows-api|
  - Fennel Api                                          |tangerine-fennel-api|
7. Development                                         |tangerine-development|
  - Requirements                                      |tangerine-requirements|
  - Building from source                      |tangerine-building-from-source|
  - Make Targets                                      |tangerine-make-targets|
  - Git Hooks                                            |tangerine-git-hooks|
  - LOC Helpers                                        |tangerine-loc-helpers|
8. End Credits                                         |tangerine-end-credits|



==============================================================================
1. About                                                     *tangerine-about*


  Tangerine provides a painless way to add fennel to your config.


FEATURES                                                  *tangerine-features*


- :fire: _BLAZING_ fast, compile times in milliseconds
- :ocean: 200% support for interactive evaluation
- :bamboo: Control over when and how to compile
- :ribbon: Natively loads `nvim/init.fnl`


COMPARISON TO OTHER PLUGINS            *tangerine-comparison-to-other-plugins*

HOTPOT :STEW: ~


- Abstracts too much away from user.
- Hooks onto lua package searchers to compile [harder to debug]


ANISEED :HERB: ~


- Excessively feature rich to be used for dotfiles.
- Blindly compiles all files that it founds, resulting in slow load times.


==============================================================================
2. Installation                                       *tangerine-installation*


1. Create file `plugin/0-tangerine.lua` to bootstrap tangerine:


>
    -- ~/.config/nvim/plugin/0-tangerine.lua
    
    -- pick your plugin manager, default [standalone]
    local pack = "tangerine" or "packer" or "paq"
    
    local function bootstrap (url)
        local name = url:gsub(".*/", "")
        local path = vim.fn.stdpath [[data]] .. "/site/pack/".. pack .. "/start/" .. name
    
        if vim.fn.isdirectory(path) == 0 then
            print(name .. ": installing in data dir...")
    
            vim.fn.system {"git", "clone", "--depth", "1", url, path}
    
            vim.cmd [[redraw]]
            print(name .. ": finished installing")
        end
    end
    
    bootstrap "https://github.com/udayvir-singh/tangerine.nvim"
<



1. Call tangerine `setup()` function:


>
    -- ~/.config/nvim/plugin/0-tangerine.lua
    
    require "tangerine".setup {
        [[ config, see below ]]
    }
<



1. Invoke `:FnlCompile` manually or add hooks in |tangerine-setup|.


:tanabata_tree: Now start writing your config in `~/.config/nvim/init.fnl`.

:hibiscus: Optionally you can also install hibiscus
<https://github.com/udayvir-singh/hibiscus.nvim> for macros.

------------------------------------------------------------------------------

                                                            *tangerine-Packer*

Packer                                 You can use packer to manage tangerine
                                       afterwards:


>
    (local packer (require :packer))
    
    (packer.startup (fn []
      (use :udayvir-singh/tangerine.nvim)))
<


Using hibiscus <https://github.com/udayvir-singh/hibiscus.nvim> macros:

>
    (require-macros :hibiscus.packer)
    
    (packer-setup {}) ; bootstraps packer
    
    (packer
      (use! :udayvir-singh/tangerine.nvim))
<


                                                               *tangerine-Paq*

>
    (local paq (require :paq))
    
    (paq {
      :udayvir-singh/tangerine.nvim
    })
<


==============================================================================
3. Setup                                                     *tangerine-setup*

DEFAULT CONFIG ~

Tangerine comes with sane defaults so that you can get going without having to
add much to your config:

>
    local nvim_dir = vim.fn.stdpath [[config]]
    
    {
        vimrc   = nvim_dir .. "/init.fnl",
        source  = nvim_dir .. "/fnl",
        target  = nvim_dir .. "/lua",
        rtpdirs = {},
    
        custom = {
            -- list of custom [source target] chunks, for example:
            -- {"~/.config/awesome/fnl", "~/.config/awesome/lua"}
        },
    
        compiler = {
            float   = true,     -- show output in floating window
            clean   = true,     -- delete stale lua files
            force   = false,    -- disable diffing (not recommended)
            verbose = true,     -- enable messages showing compiled files
    
            globals = vim.tbl_keys(_G), -- list of alowedGlobals
            version = "latest",         -- version of fennel to use, [ latest, 1-1-0, 1-0-0, 0-10-0, 0-9-2 ]
    
            -- hooks for tangerine to compile on:
            -- "onsave" run every time you save fennel file in {source} dir
            -- "onload" run on VimEnter event
            -- "oninit" run before sourcing init.fnl [recommended than onload]
            hooks   = {}
        },
    
        eval = {
            float  = true,      -- show results in floating window
            luafmt = function() -- function that returns formatter with flags for peaked lua
                return {"/path/lua-format", ...} -- optionally install lua-format by `$ luarocks install --server=https://luarocks.org/dev luaformatter`
            end,
    
            diagnostic = {
                virtual = true,  -- show errors in virtual text
                timeout = 10     -- how long should the error persist
            }
        },
    
        keymaps = {
            -- set them to <Nop> if you want to disable them
            eval_buffer = "gE",
            peak_buffer = "gL",
            goto_output = "gO",
            float = {
                next    = "<C-K>",
                prev    = "<C-J>",
                kill    = "<Esc>",
                close   = "<Enter>",
                resizef = "<C-W>=",
                resizeb = "<C-W>-"
            }
        },
    
        highlight = {
            float   = "Normal",
            success = "String",
            errors  = "DiagnosticError"
        },
    }
<


EXAMPLE CONFIG ~

Here is config that I use in my dotfiles:

>
    {
        -- save fnl output in a separate dir, it gets automatically added to package.path
        target = vim.fn.stdpath [[data]] .. "/tangerine",
    
        -- compile files in &rtp
        rtpdirs = {
            "plugin",
            "colors",
            "$HOME/mydir" -- absolute paths are also supported
        },
    
        compiler = {
            -- disable popup showing compiled files
            verbose = false,
    
            -- compile every time changed are made to fennel files or on entering vim
            hooks = ["onsave", "oninit"]
        }
    }
<


==============================================================================
4. Commands                                               *tangerine-commands*

COMPILING                                                *tangerine-compiling*

                             *tangerine-:FnlCompileBuffer* *:FnlCompileBuffer*

:FnlCompileBuffer                      Compiles current active fennel buffer


                                         *tangerine-:FnlCompile* *:FnlCompile*

:FnlCompile[!]                         Diff compiles all indexed fennel files


If bang! is present then forcefully compiles all `source` files

                                             *tangerine-:FnlClean* *:FnlClean*

:FnlClean[!]                           Deletes stale or orphaned lua files in
                                       `target` dir


If bang! is present then it deletes all compiled lua files

EVALUATION                                              *tangerine-evaluation*

                                                       *tangerine-:Fnl* *:Fnl*

:Fnl {expr}                            Executes and Evalutate {expr} of fennel


>
    :Fnl (print "Hello World")
      -> Hello World
    
    :Fnl (values some_var)
      -> :return [ 1 2 3 4 ]
<


                                               *tangerine-:FnlFile* *:FnlFile*

:FnlFile {file}                        Evaluates {file} of fennel and outputs
                                       the result


>
    :FnlFile path/source.fnl
    
    :FnlFile % ;; not recommended
<


                                           *tangerine-:FnlBuffer* *:FnlBuffer*

:[range]FnlBuffer                      Evaluates all lines or [range] in
                                       current fennel buffer



  mapped to `gE` by default.


PEAKING                                                    *tangerine-peaking*

                                               *tangerine-:FnlPeak* *:FnlPeak*

:[range]FnlPeak                        Peak lua output for [range] in current
                                       fennel buffer



  mapped to `gL` by default.


                                   *tangerine-:FnlGotoOutput* *:FnlGotoOutput*

:FnlGotoOutput                         Open lua output of current fennel buffer
                                       in a new buffer



  mapped to `gO` by default.


WINDOW                                                      *tangerine-window*

                                         *tangerine-:FnlWinNext* *:FnlWinNext*

:FnlWinNext [N]                        Jump to [N]th next floating window
                                       created by tangerine



  mapped to `CTRL-K` in floats by default.


                                         *tangerine-:FnlWinPrev* *:FnlWinPrev*

:FnlWinPrev [N]                        Jump to [N]th previous floating window
                                       created by tangerine



  mapped to `CTRL-J` in floats by default.


                                     *tangerine-:FnlWinResize* *:FnlWinResize*

:FnlWinResize [N]                      Increase or Decrease floating window
                                       height by [N] factor



  mapped to `CTRL-W =` to increase and `CTRL-W -` decrease by default.


                                       *tangerine-:FnlWinClose* *:FnlWinClose*

:FnlWinClose                           Closes current floating window under
                                       cursor



  mapped to `ENTER` in floats by default.


                                         *tangerine-:FnlWinKill* *:FnlWinKill*

:FnlWinKill                            Closes all floating windows made by
                                       tangerine



  mapped to `ESC` in floats by default.


==============================================================================
5. FAQ                                                         *tangerine-faq*

**Q: How to make tangerine compile automatically when you open vim**

**A:** add hooks in config:

>
    require [[tangerine]].setup {
        compiler = {
            -- if you want to compile before loading init.fnl (recommended)
            hooks = ["oninit"]
    
            -- if you only want after VimEnter event has fired
            hooks = ["onenter"]
        }
    }
<


**Q: How to tuck away compiled output in a separate directory**

**A:** change target in config:

>
    require [[tangerine]].setup {
        target = "/path/to/your/dir"
    }
<


**Q: How to make impatient work with tangerine**

**A:** just bootstrap and require impatient before calling tangerine:

>
    bootstrap "https://github.com/lewis6991/impatient.nvim"
    
    require [[impatient]]
    
    require [[tangerine]].setup {...}
<


**Q: How to use lua files interchangeably with fennel files**

**A:** lua files can simply be stored in `fnl` dir:

>
    fnl
    ├── options.lua
    └── autocmd.fnl
<


>
    ; just require both normally
    (require :options)
    (require :autocmd)
<


**Q: How to fix errors in macros while migrating from hotpot**

**A:** make sure that macro files are suffixed with `-macros.fnl`.

>
    utils
    ├── neovim-macros.fnl
    └── packer-macros.fnl
<


see #2 <https://github.com/udayvir-singh/tangerine.nvim/issues/2> for more
information

==============================================================================
6. Api                                                         *tangerine-api*

By default tangerine provides the following api:

>
    :Fnl tangerine.api
    
    -> :return {
         :compile {
           :all    (function 0)
           :buffer (function 1)
                 :custom (function 2)
           :dir    (function 3)
           :file   (function 4)
           :rtp    (function 5)
           :string (function 6)
           :vimrc  (function 7)
         }
         :clean {
           :rtp      (function 8)
           :target   (function 9)
           :orphaned (function 10)
         }
         :eval {
           :buffer (function 11)
           :file   (function 12)
           :peak   (function 13)
           :string (function 14)
         }
         :win {
           :next    (function 15)
           :prev    (function 16)
           :close   (function 17)
           :killall (function 18)
           :resize  (function 19)
         }
         :goto_output (function 20)
         :serialize   (function 21)
       }
<


COMPILER API                                          *tangerine-compiler-api*

This section describes function for `tangerine.api.compile.{func}`

                   *tangerine-compile-string* *tangerine.api.compile.string()*

compile-string                         (compile.string {str} {opts*})


Compiles string {str} of fennel, returns string of lua.

PARAMETERS: ~

>
    {
        :filename <string>
        :globals  <list>
    }
<


                       *tangerine-compile-file* *tangerine.api.compile.file()*

compile-file                           (compile.file {source} {target} {opts*})


Compiles fennel {source} and writes output to {target}.

PARAMETERS: ~

>
    {
        :filename <string>
        :globals  <list>
    }
<


                         *tangerine-compile-dir* *tangerine.api.compile.dir()*

compile-dir                            (compile-dir {source} {target} {opts*})


Diff compiles files in {source} dir and outputs to {target} dir.

PARAMETERS: ~

>
    {
        :force   <boolean>
        :float   <boolean>
        :verbose <boolean>
        :globals <list>
    }
<


{opts.force} disables diffing if set to `true`

EXAMPLE: ~

>
    (tangerine.api.compile.dir
        :path/fnl
        :path/lua
        { :force false :float true :verbose true })
<


                   *tangerine-compile-buffer* *tangerine.api.compile.buffer()*

compile-buffer                         (compile-buffer {opts*})


Compiles the current active fennel buffer.

PARAMETERS: ~

>
    {
        :float    <boolean>
        :verbose  <boolean>
        :filename <string>
        :globals  <list>
    }
<


                     *tangerine-compile-vimrc* *tangerine.api.compile.vimrc()*

compile-vimrc                          (compile-vimrc {opts*})


Diff compiles `config.vimrc` to `config.target` dir.

PARAMETERS: ~

>
    {
        :force    <boolean>
        :float    <boolean>
        :verbose  <boolean>
        :filename <string>
        :globals  <list>
    }
<


{opts.force} disables diffing if set to `true`

                         *tangerine-compile-rtp* *tangerine.api.compile.rtp()*

compile-rtp                            (compile.rtp {opts*})


Diff compiles fennel files in `config.rtpdirs` or {opts.rtpdirs}.

PARAMETERS: ~

>
    {
        :rtpdirs  <list>
        :force    <boolean>
        :float    <boolean>
        :verbose  <boolean>
        :globals  <list>
    }
<


{opts.force} disables diffing if set to `true`

EXAMPLE: ~

>
    (tangerine.api.compile.rtp {
        :force   false
        :float   true
        :verbose true
        :rtpdirs ["colors" "plugin" "$HOME/mydir"]})
<


                   *tangerine-compile-custom* *tangerine.api.compile.custom()*

compile-custom                         (compile.custom {opts*})


Diff compiles fennel files indexed in `config.custom` or {opts.custom}.

PARAMETERS: ~

>
    {
        :custom   <list>
        :force    <boolean>
        :float    <boolean>
        :verbose  <boolean>
        :globals  <list>
    }
<


{opts.force} disables diffing if set to `true`

EXAMPLE: ~

>
    (tangerine.api.compile.custom {
        :custom [ ["~/path/fnl" "~/path/lua"] ]
        :force   false
        :float   true
        :verbose true })
<


                         *tangerine-compile-all* *tangerine.api.compile.all()*

compile-all                            (compile.all {opts*})


Diff compiles all indexed fennel files in `config`.

PARAMETERS: ~

>
    {
        :force    <boolean>
        :float    <boolean>
        :verbose  <boolean>
        :globals  <list>
        :rtpdirs  <list>
        :custom   <list>
    }
<


{opts.force} disables diffing if set to `true`

CLEANING API                                          *tangerine-cleaning-api*

Provides functions to clean stale / orphaned lua files in target dirs.

This section describes function for `tangerine.api.clean.{func}`

                       *tangerine-clean-target* *tangerine.api.clean.target()*

clean-target                           (clean.target {source} {target} {opts*})


Deletes orphaned? {target} after comparing against {source}.

PARAMETERS: ~

>
    {
        :force <boolean>
    }
<


{opts.force} deletes {target} without comparing if set to `true`

                                                         *tangerine-clean-rtp*

clean-rtp                              (clean.rtp {opts*})


Deletes all orphaned lua files in `config.rtpdirs` or {opts.rtpdirs}.

PARAMETERS: ~

>
    {
        :force    <boolean>
        :float    <boolean>
        :verbose  <boolean>
        :rtpdirs  <list>
    }
<


{opts.force} deletes all compiled files if set to `true`

                   *tangerine-clean-orphaned* *tangerine.api.clean.orphaned()*

clean-orphaned                         (clean.orphaned {opts*})


Deletes all orphaned lua files indexed inside `target` dirs.

PARAMETERS: ~

>
    {
        :force    <boolean>
        :float    <boolean>
        :verbose  <boolean>
        :rtpdirs  <list>
    }
<


{opts.force} deletes all compiled files if set to `true`

EVALUATION API                                      *tangerine-evaluation-api*

This section describes function for `tangerine.api.eval.{func}`

                         *tangerine-eval-string* *tangerine.api.eval.string()*

eval-string                            (eval.string {str} {opts*})


Evaluates string {str} of fennel, pretty prints the output.

PARAMETERS: ~

>
    {
        :float    <boolean>
        :virtual  <boolean>
        :filename <string>
        :offset   <number> ;; line offset for errors
    }
<


                             *tangerine-eval-file* *tangerine.api.eval.file()*

eval-file                              (eval.file {path} {opts*})


Evaluates {path} of fennel, pretty prints the output.

PARAMETERS: ~

>
    {
        :float    <boolean>
        :virtual  <boolean>
        :filename <string>
    }
<


                         *tangerine-eval-buffer* *tangerine.api.eval.buffer()*

eval-buffer                            (eval.buffer {start} {end} {opts*})


Evalutes lines {start} to {end} in current fennel buffer.

PARAMETERS: ~

>
    {
        :float    <boolean>
        :virtual  <boolean>
        :filename <string>
    }
<


                             *tangerine-eval-peak* *tangerine.api.eval.peak()*

eval-peak                              (eval.peak {start} {end} {opts*})


Peak lua output for lines {start} to {end} inside a scratch buffer.

PARAMETERS: ~

>
    {
        :float    <boolean>
        :virtual  <boolean>
        :filename <string>
    }
<


UTILS API                                                *tangerine-utils-api*

                         *tangerine-goto_output* *tangerine.api.goto_output()*

goto_output                            (tangerine.api.goto_output)


Open lua source of current fennel buffer in a new buffer.

                             *tangerine-serialize* *tangerine.api.serialize()*

serialize                              (tangerine.api.serialize {…})


Returns human-readable representation of {…}.

EXAMPLE: ~

>
    (tangerine.api.serialize example)
    -> ":return [ 1 2 3 4 ]"
<


WINDOWS API                                            *tangerine-windows-api*

Provides functions to interact with floating windows created by tangerine.

This section describes function for `tangerine.api.win.{func}`

                               *tangerine-win-next* *tangerine.api.win.next()*

win-next                               (tangerine.api.win.next {steps*})


Switch to next floating window by 1 or N {steps*}.

                               *tangerine-win-prev* *tangerine.api.win.prev()*

win-prev                               (tangerine.api.win.prev {steps*})


Switch to previous floating window by 1 or N {steps*}.

                           *tangerine-win-resize* *tangerine.api.win.resize()*

win-resize                             (tangerine.api.win.resize {factor})


Changes height of current floating window by {factor} of N.

                             *tangerine-win-close* *tangerine.api.win.close()*

win-close                              (tangerine.api.win.close)


Closes current floating window, switching to nearest neighbor afterwards.

                         *tangerine-win-killall* *tangerine.api.win.killall()*

win-killall                            (tangerine.api.win.killall)


Closes all floating windows created by tangerine.

FENNEL API                                              *tangerine-fennel-api*

                                  *tangerine-fennel-load* *tangerine.fennel()*

fennel-load                            (tangerine.fennel {version*})


Provides underlying fennel used by tangerine

{version} can be one of [ `"latest"` `"1-1-0"` `"1-0-0"` `"0-10-0"` `"0-9-2"` ]

==============================================================================
7. Development                                         *tangerine-development*

REQUIREMENTS                                          *tangerine-requirements*

│                     Program                      │         Description         │
│pandoc <https://github.com/jgm/pandoc>            │generates vimdoc             │
│lua <https://www.lua.org>                         │runs included fennel         │
│make <https://www.gnu.org/software/make>          │runs build instructions      │
│watchexec <https://github.com/watchexec/watchexec>│build on changes (optional)  │
│bash <https://www.gnu.org/software/bash>          │runs shell scripts           │
│utils                                             │coreutils findutils gawk curl│



  only GNU/utils work, 9base or busybox should not work


BUILDING FROM SOURCE                          *tangerine-building-from-source*

>
    git clone https://github.com/udayvir-singh/tangerine.nvim
    cd tangerine.nvim
    
    make <git-hooks>
    make <target>
<


see `make help` or |tangerine-below| for information on targets.

MAKE TARGETS                                          *tangerine-make-targets*

│     Target     │                    Description                    │
│:fnl            │compiles fennel files                              │
│:deps           │copy required deps in lua folder                   │
│:vimdoc         │runs panvimdoc to generate vimdocs                 │
│:fnldoc         │generates module level documentation               │
│                │                                                   │
│:build          │combines :fnl :deps :vimdoc :fnldoc                │
│:watch-build    │watches source dir, runs :build on changes         │
│                │                                                   │
│:clean          │deletes build and install dir                      │
│:install        │install tangerine on this system                   │
│                │                                                   │
│:runner         │compiles test runner library                       │
│:test           │runs unit tests, will erase nvim config            │


To build tangerine run:

>
    $ make clean build
    # or
    $ make watch-build
<


To install tangerine run:

>
    $ make install
<


GIT HOOKS                                                *tangerine-git-hooks*

│    Target    │                         Description                          │
│git-pull      │safely fetches git repo, prevents conflicts with local changes│
│git-skip      │makes git ignore changes to build files                       │
│git-unskip    │reverts git-skip, makes build files trackable                 │


EXAMPLE WORKFLOW: ~

>
    $ make git-skip # first thing that you should be running
    
    # makes changes to tangerine
    $ ...
    $ make clean build
    
    # commit changes
    $ git commit -a -m "<msg>"
    
    # cleanly fetch from origin
    $ make git-pull
<


LOC HELPERS                                            *tangerine-loc-helpers*

Helpers to generate detailed summary about lines of code in source files:

>
    $ make loc-{language}
<


SUPPORTED LANGUAGES: ~


- `fennel` / `test`
- `bash`
- `markdown`
- `makefile`
- `yaml`


EXAMPLES: ~

>
    $ make loc-fennel
    
    $ make loc-bash
<


==============================================================================
8. End Credits                                         *tangerine-end-credits*


- **myself**: for making this plugin
- **myself**: for refactoring this plugin
- **myself**: for bloating this plugin…


>
    :: おれとして白眼くらする蛙かな ::
<


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
